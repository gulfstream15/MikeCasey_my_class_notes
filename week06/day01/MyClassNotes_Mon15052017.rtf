{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red34\green79\blue188;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14080\viewh10140\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Week06 Day01\

\b0\fs24 \

\b\fs28 Java
\b0 \
\
Objectives\
\

\b Know what a statically typed language is.\

\b0 \
Ruby is dynamically typed, Java is statically typed. Java really cares what type of thing a variable is assigned to being a statically typed language.\
\

\b Understand the difference between compiled and interpreted languages\

\b0 \
interpreted looks at the code as its running it. Compiled converts to an intermediate code - will run faster as all safety checks are done.  \
\

\b Be able to write, compile and run a Java class.\

\b0 \
The reason you can\'92t assign objects of different types is for safety - it stops someone assigning the wrong type.\
\
Constructors construct an instance of a class. \
\

\b Comparing Ruby with Java\

\b0 \
private String name;		 		// this is like ruby @name\
\
  public Bear(String name) \{		// this is equivalent to self\
    this.name = name;\
  \}\
\
  public String getName() \{			//  this is like @initialize\
    return this.name;\
  \}\
\
private String name; 				 // this is like attr_reader\
\
Running Java\
\
To do two commands in one line:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs24 \cf1 \cb2 \CocoaLigature0 javac *.java && java Runner
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
To set up Java unit testing (TDD):\
\
go to git hub:\
{\field{\*\fldinst{HYPERLINK "https://github.com/junit-team/junit4/wiki/Download-and-Install"}}{\fldrslt https://github.com/junit-team/junit4/wiki/Download-and-Install}}\
\
get top jar from this directory (unit.jar)\
{\field{\*\fldinst{HYPERLINK "http://search.maven.org/#search%7Cgav%7C1%7Cg:%22junit%22%20AND%20a:%22junit%22"}}{\fldrslt http://search.maven.org/#search|gav|1|g:"junit" AND a:"junit"}} \
\
get top jar from this directory (unit.jar)\
{\field{\*\fldinst{HYPERLINK "http://search.maven.org/#search%7Cgav%7C1%7Cg:%22org.hamcrest%22%20AND%20a:%22hamcrest-core%22"}}{\fldrslt http://search.maven.org/#search|gav|1|g:"org.hamcrest" AND a:"hamcrest-core"}}\
 \
Make a junit directory in the ~ (home) directory\
\
Copy these two jar files from Download directory to the ~ directory\
\
subl the .zshrc and add the following lines:\
\
export JUNIT_HOME="$HOME/junit"\
export PATH="$PATH:$JUNIT_HOME"\
export CLASSPATH="$CLASSPATH:$JUNIT_HOME/junit-4.12.jar:$JUNIT_HOME/hamcrest-core-1.3.jar"\
alias junit="java org.junit.runner.JUnitCore $1"\
\
then source .zshrc\
\
run \'91junit\'92 to check it runs.  \
\
In BearTest class at top:\
\
import static org.junit.Assert.assertEquals;\
import org.junit.Test;\
\
public class BearTest \{\
  @Test\
  public void hasName() \{\
    Bear bear = new Bear("Steve");\
    assertEquals("Steve", bear.getName());\
  \}\
\}\
\
To run:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs24 \cf1 \cb2 \CocoaLigature0 javac *.java 
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \

\f1\fs24 \cf1 \cb2 \CocoaLigature0 junit BearTest
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\
In BearTest:\
\
assertEquals(95.62, bear.getWeight(), 0.01); \
\
The 0.01 is asserting equal within a certain tolerance - this is required. \
\
Don\'92t store variables in float as they lose accuracy - use int and divide by 100 (for example).\
\

\b Basic Definitions\

\b0 \
double is called \'91double\'92 because of double precision\
\
value types - primitives - int/double/float/byte/short/long/char/boolean\
\
reference types - classes i.e. a reference to an object \
\

\b Further Objectives\

\b0 \
Know how to create a basic array\
Understand two kinds of \'91for\'92 loop\
Understand \'91null\'92\
Be able to use arrays in Java\
\
In BearTest:\
\
The @Before method does the equivalent of setup in Ruby\
\
 public class BearTest\{\
  Bear bear;\
\
  @Before \
  public void before() \{\
    bear = new Bear("Baloo");\
  \}\
\
  @Test\
  public void hasName()\{\
    assertEquals("Baloo", bear.getName()); \
  \}\
\}\
\
This declaration:\
\
this.belly = new Salmon[5];\
\
puts \'91null\'92 in all the elements of the Salmon array (it is the same as nil in Ruby)\
\

\f1\fs24 \cf1 \cb2 \CocoaLigature0 /Users/user/Desktop/CodeClan/training/week06/day01/multiple_classes_starter_code
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\
Note in eat method below that can use return even though return type is void as it just \
exits the method if a true condition i.e. isBellyFull is true.\
\
public void eat(Salmon salmon) \{\
    if (isBellyFull()) \{\
      // We can use this with a void method \
      // to come out of the method    \
      return;         \
    \}\
    int index = foodCount();\
    belly[index] = salmon; \
  \}\
\
Note here in the Planet.java class that it is clearer to use this.name rather than just name:\
\
 public void explode() \{\
    System.out.println("Boom! " + this.name + " has exploded!");\
    // Alternative\
    // String text = String.format("Boom! %s has exploded", this.name);\
    // System.out.println(text);  \
    \}\
  \} \
\
\
Planet planet = new Planet("Mars", 908_973);\
\
\
\
\
\
\
}