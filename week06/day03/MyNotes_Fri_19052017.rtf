{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red34\green79\blue188;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17540\viewh10660\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Week 06 Day 05\
\
# Homework\
\
This weekend's homework is to build the card game you planned on Wednesday.\
\
You're going to try and build some variations of Blackjack.\
\
## MVP\
- Write a card game where cards are dealt to two players.\
- The cards should be compared based on value, and the person with the highest value card wins.\
- You don't *need* a `Runner` class - if you have a good suite of unit tests, but you might find it helpful to have one.\
\
## Advice\
- It might be a good idea to make it possible to construct a `Deck` (and other classes) with fewer than 52 cards. This will really help with testing.\
- Mocking *could* be helpful, but don't spend all your time trying to work with Mockito. It can be a massive pain.\
- Just because you know about design patterns now doesn't mean that everything has to make use of them. If you see a good place to use a pattern, go for it, otherwise, just write code as you would normally.\
\
## Extension (Harder)\
- Deal two cards to each player.\
- Implement full Blackjack comparison rules and choose the winner based on these.\
- Watch out for Aces! There are special rules about how these should be scored.\
\
## Extension (DANGER: Really Hard)\
- Allow the player to "twist" or "stick".\
- Allow the dealer/other player to do the same.\
- Compare hands once both players have stuck.\
- If you get to this point, have a nice long rest. Then, if you really want to keep coding, trying implementing doubling down or something. Though, to be honest, I don't even know what doubling down is. I just know it's a Blackjack thing.\
\
Android Studio\
\
After initial download/install has completed.\
1. Open Android Preferences (Cmd + ,)\
2. Find/search for the tab 'Android SDK'\
3. Check all the boxes from API 16 to API 24, and uncheck API 25\
4. Click 'Apply'\
5. Accept agreements\
6. Wait for install\
\
NOTE: If when you open Android Studio it prompts you to install API/Platform 25, cancel and select the 'Do not re-run the wizard' option.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Homework\
\
A runner class with something to just compare the size of the cards of each player and determine the winner from the highest card - a few classes to do this. \
\
Then if happy with that see how to develop the code to  put in the rules for pontoon. and then determine the winner from the rules of pontoon. \
\
MPV only the extension is very difficult.   \
\
Classes\
\
enum - suits (4)\
enum - values (1-13) \
\
Classes:\
\
Card \
Hand\
Deck\
Player \
Game\
Runner \
\
Interfaces - Playable\
\
enums lab\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf1 \cb2 \CocoaLigature0 /Users/user/Desktop/CodeClan/TrainING/week06/day04/enums\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \CocoaLigature1 \

\b\fs36 Suggested start (from Online forum):\

\b0\fs24 \
Card class:\
getSuit()\
getRank() 10, J, Q, K, A, etc)\
getValue() J=Q=K=10\
\
Deck class\
Array of cards\
shuffle()\
deal() \
\
Hand class\
add (Card c)\
getValue()\
\

\b\fs36 From lewis_chase_ppt05.ppt\

\b0\fs24 \
\cb3 cards, deck, and players hands\
\
game - controls play order and whether hit or stays\
\
card, deck and hand are low level components - they are well defined in terms of state and behaviour (bottom up design) i.e. do low level first then work up.\
\pard\pardeftab720\sl740\sa240\partightenfactor0

\b\fs28 \cf0 \expnd0\expndtw0\kerning0
A Card object must represent:
\b0 \uc0\u8232 the suit of the card (heart, diamond, club, or spade), the value of the card (1 to 11),\u8232 the face of the card (ace, king, queen, six, two, etc.), the image of the card and\
A Card object must also provide a constructor, operations to: the\
\pard\pardeftab720\sl620\sa240\partightenfactor0
\cf0 retrieve the suit, value, face, or image of the card,\uc0\u8232 an operation to change the value of an ace from 11 to 1 \
\pard\pardeftab720\sl840\sa240\partightenfactor0
\cf0 A deck is an unordered collection of unique cards \
Thus a set is a perfect collection to represent a deck \

\b The Deck class must include \
\pard\pardeftab720\sl740\sa240\partightenfactor0

\b0 \cf0 the collection of Cards, \
a method to retrieve a random card from the deck. We will also choose to instantiate a new deck at the beginning of each new game \
\pard\pardeftab720\sl840\sa240\partightenfactor0
\cf0 This eliminates the possibility of ever having an \'93empty\'94 deck during a game \

\b The hand class:\
\pard\pardeftab720\sl740\sa240\partightenfactor0

\b0 \cf0 A hand is a collection of unique cards that have been dealt to a player \
A Hand object must keep track of: the cards in the hand,\uc0\u8232 the count of the cards in the hand, the value of the hand \
A Hand object must also provide methods to: add a card to the hand,\uc0\u8232 remove a card from the hand,\u8232 return the value of the hand, \
\pard\pardeftab720\sl620\sa240\partightenfactor0
\cf0 provide a string representation of the hand\
\pard\pardeftab720\sl840\sa240\partightenfactor0
\cf0 A Hand object must also provide a method to determine if an ace is in the hand and needs to be reduced in value from 11 to 1 \
As with a Deck, a set seems a reasonable collection to represent a Hand since each of the cards in the Hand are unique and order does not matter \cb1 \
\pard\pardeftab720\sl620\sa240\partightenfactor0
\cf0 Pontoon (Game) class?\
}