{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red34\green79\blue188;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13380\viewh10820\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Week02 Day 02\
\
Homework (Team)\
\
attr_reader allows read only and generates getters\
attr_accessor allows read and write access. \
\
so attr_reader: :team_name, :players, :points\
atter_accessor: coach (i.e. no reader required as in built)\
\
Note in homework team.rb and team_spec.rb that all variables declared in accessor are called points(), etc. This is because in accessors there are in built functions.  \
\
Objectives\
\
Know how multiple  classes can interact\
Understand how we can delegate responsibilities to other classes\
Be able to write multiple interacting classes\
\
Run this in command window to set up emoji for mini tests - all this does is show emoji\'92s when the code is compiled e.g. 
\f1 \cf1 \cb2 \CocoaLigature0 \uc0\u55357 \u56474 
\f2  
\f1 \uc0\u55357 \u56489 
\f2  
\f1 \uc0\u55357 \u56474 
\f2  
\f0 \cf0 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2 \cf1 \cb2 \CocoaLigature0 gem install minitest-emoji
\f0 \cf0 \cb1 \CocoaLigature1 \
\
in fish_spec.rb\
\
require('minitest/emoji')\
\
Best Practice  \
\
have one class per file\
make sure the spec files (fish_spec.rb) are in the ./specs directory \
make sure that definition file (e.g. fish.rb) is in the directory above \
\

\f2 \cf1 \cb2 \CocoaLigature0 NoMethodError: undefined method `<<' for nil:NilClass\
    /Users/user/Desktop/CodeClan/Training/week02/day02/river.rb:4:in `add_fish'\
    specs/river_spec.rb:20:in `test_can_add_fish_to_river'
\f0 \cf0 \cb1 \CocoaLigature1 \
\
this error means we have not defined something\
\
Building Classes and spec files\
\
If you are creating something then you will need a \'91require\'92 expression at the top\
\
The point of the bear/fish/river example is that responsibility is given to classes and tries to avoid repitition.\
\
Class Diagrams (UML)\
\
\
\
}