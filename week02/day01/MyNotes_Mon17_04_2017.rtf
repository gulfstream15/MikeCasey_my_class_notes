{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red34\green79\blue188;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13320\viewh10560\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf2 Classes (a template or blueprint)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf1 \cb3 \CocoaLigature0 my_hash = \{\} same as my_hash = Hash.new\
\pard\pardeftab560\slleading20\partightenfactor0

\f0 \cf2 \cb1 \CocoaLigature1 \
OO - focus on designing classes modelling real world objects\
Objectives\
\pard\tx220\tx720\pardeftab560\li720\fi-720\slleading20\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\'95	}Know how OO programming breaks up the code\
{\listtext	\'95	}Know the difference between classes and objects\
{\listtext	\'95	}Be able to write your own classes in Ruby\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \
objects let us combine data and behaviour\
\
uninitialised constant in ruby means a class (for e.g.) is not defined\
\
call .new -> Ruby Magic -> calls .initialize\
\
Error \'91bubble up\'92 - stack trace -runs from method were issue is to where it was called, etc.\
\
An instance variable is a variable which id held onto by the instance of a class i.e. it is unique to a name\
\
In Ruby\
# methods are always public (and rarely defined as private)\
# all instance variables are private by default\
# public in ruby means accessible to the outside world\
# Class variables rarely used in Ruby \
\
Good practice to initialise all variables in the initialize() method but they can be initialised elsewhere.\
\
  attr_accessor :holder_name \
\
In bank account lab\
\
# @bank_account.set_type("pleasure")\
# The following line uses the attr_accessor is equivalent using attr_accessor :holder_name, :amount, :type\
    @bank_account.type = "pleasure"\
\
Alternative Syntax\
@amount can be written as self.amount (as in get me \
\
\
\
 }